generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  name                   String
  avatar                 String?
  googleId               String                  @unique
  status                 UserStatus              @default(FREE)
  riskTolerance          String                  @default("moderate")
  trialStartDate         DateTime                @default(now())
  trialEndDate           DateTime
  totalTrialDays         Int                     @default(7)
  hasUsedTrial           Boolean                 @default(true)
  requestExtensionUsed   Boolean                 @default(false)
  referralExtensions     Int                     @default(0)
  extensionsUsed         Int                     @default(0)
  referralCode           String                  @unique
  referredBy             String?
  referralCount          Int                     @default(0)
  freeMonthsEarned       Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  lastLogin              DateTime                @default(now())
  analyticsEvents        AnalyticsEvent[]
  portfolioSnapshots     PortfolioSnapshot[]
  portfolios             Portfolio[]
  recommendationTrackers RecommendationTracker[]
  recommendations        Recommendation[]
  subscriptions          Subscription[]
  extensions             TrialExtension[]
  userPerformance        UserPerformance?

  @@index([email])
  @@index([referralCode])
  @@index([status])
  @@index([trialEndDate])
  @@map("users")
}

model TrialExtension {
  id              String        @id @default(cuid())
  userId          String
  extensionType   ExtensionType
  daysExtended    Int
  reason          String?
  referralCode    String?
  convertedToPaid Boolean       @default(false)
  conversionDate  DateTime?
  daysToConvert   Int?
  createdAt       DateTime      @default(now())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, extensionType])
  @@map("trial_extensions")
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  status          SubscriptionStatus
  plan            String
  amount          Int
  currency        String             @default("NGN")
  startDate       DateTime
  endDate         DateTime
  nextBillingDate DateTime?
  paymentProvider String?
  externalId      String?
  freeMonthsUsed  Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Portfolio {
  id              String              @id @default(cuid())
  userId          String
  name            String              @default("My Portfolio")
  stocks          Json
  totalValue      Decimal?
  isActive        Boolean             @default(true)
  uploadedAt      DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  snapshots       PortfolioSnapshot[]
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendations Recommendation[]

  @@index([userId, isActive])
  @@map("portfolios")
}

model Recommendation {
  id              String                 @id @default(cuid())
  userId          String
  portfolioId     String
  ticker          String
  action          String
  confidence      String
  currentPrice    Decimal?
  targetPrice     Decimal?
  potentialReturn Decimal?
  riskLevel       String
  timeHorizon     String?
  reasoning       String
  isActive        Boolean                @default(true)
  createdAt       DateTime               @default(now())
  tracker         RecommendationTracker?
  portfolio       Portfolio              @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([ticker])
  @@map("recommendations")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventName String
  eventData Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventName, createdAt])
  @@index([userId, eventName])
  @@map("analytics_events")
}

model RecommendationTracker {
  id                String         @id @default(cuid())
  recommendationId  String         @unique
  userId            String
  ticker            String
  action            String
  confidence        String
  recommendedPrice  Decimal
  targetPrice       Decimal?
  recommendedAt     DateTime
  wasFollowed       Boolean        @default(false)
  followedAt        DateTime?
  actualActionPrice Decimal?
  currentPrice      Decimal?
  priceUpdatedAt    DateTime?
  actualReturn      Decimal?
  missedReturn      Decimal?
  targetReached     Boolean        @default(false)
  targetReachedAt   DateTime?
  accuracy          String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  recommendation    Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, recommendedAt])
  @@index([ticker, recommendedAt])
  @@index([wasFollowed])
  @@map("recommendation_trackers")
}

model PortfolioSnapshot {
  id            String    @id @default(cuid())
  userId        String
  portfolioId   String
  totalValue    Decimal
  totalCost     Decimal
  totalReturn   Decimal
  returnPercent Decimal
  holdings      Json
  marketIndex   Decimal?
  snapshotDate  DateTime  @default(now())
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, snapshotDate])
  @@index([portfolioId, snapshotDate])
  @@map("portfolio_snapshots")
}

model MarketData {
  id            String   @id @default(cuid())
  ticker        String
  openPrice     Decimal
  closePrice    Decimal
  highPrice     Decimal
  lowPrice      Decimal
  currentPrice  Decimal
  volume        BigInt
  value         Decimal
  marketCap     Decimal?
  peRatio       Decimal?
  dividendYield Decimal?
  dataDate      DateTime
  source        String   @default("NGX")
  createdAt     DateTime @default(now())

  @@unique([ticker, dataDate])
  @@index([ticker, dataDate])
  @@index([dataDate])
  @@map("market_data")
}

model UserPerformance {
  id                   String   @id @default(cuid())
  userId               String   @unique
  totalRecommendations Int      @default(0)
  followedCount        Int      @default(0)
  correctPredictions   Int      @default(0)
  incorrectPredictions Int      @default(0)
  pendingPredictions   Int      @default(0)
  averageReturn        Decimal?
  totalReturn          Decimal?
  bestReturn           Decimal?
  worstReturn          Decimal?
  accuracyRate         Decimal?
  buyAccuracy          Decimal?
  sellAccuracy         Decimal?
  holdAccuracy         Decimal?
  missedOpportunities  Decimal?
  percentileRank       Int?
  lastUpdated          DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_performances")
}

model AIModelPerformance {
  id                 String   @id @default(cuid())
  modelName          String
  requestType        String
  ticker             String?
  predictionAccuracy Decimal
  confidenceScore    Decimal
  consensusLevel     Decimal
  processingTimeMs   Int
  memoryUsageMb      Int?
  userId             String?
  requestData        Json?
  recommendation     String
  reasoning          String
  riskAssessment     String
  createdAt          DateTime @default(now())

  @@index([modelName, createdAt])
  @@index([requestType, createdAt])
  @@index([ticker, createdAt])
  @@map("ai_model_performances")
}

model AnalysisResult {
  id              String   @id @default(cuid())
  ticker          String
  userId          String?
  analysisLayer   String
  layerScore      Decimal
  confidence      Decimal
  reasoning       String
  supportingData  Json
  indicators      Json?
  modelName       String
  modelVersion    String?
  analysisRequest Json
  marketData      Json?
  createdAt       DateTime @default(now())

  @@index([ticker, analysisLayer, createdAt])
  @@index([userId, createdAt])
  @@index([modelName, createdAt])
  @@map("analysis_results")
}

model MarketDataRealtime {
  id            String   @id @default(cuid())
  ticker        String
  price         Decimal
  change        Decimal
  changePercent Decimal
  volume        BigInt
  avgVolume     BigInt?
  marketCap     Decimal?
  dayHigh       Decimal?
  dayLow        Decimal?
  source        String
  timestamp     DateTime
  isValidated   Boolean  @default(false)
  quality       String?
  createdAt     DateTime @default(now())

  @@unique([ticker, timestamp, source])
  @@index([ticker, timestamp])
  @@index([timestamp])
  @@map("market_data_realtime")
}

enum UserStatus {
  TRIAL
  FREE
  PRO_MONTHLY
  PRO_ANNUAL
  EXPIRED
}

enum ExtensionType {
  REQUEST
  REFERRAL
  REFERRED
  SOCIAL
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PENDING
}
